NCLua NEWS -- History of user-visible changes.

* Version 1.4, ???

  - Add support to incremental responses to the HTTP event class.

    We updated the syntax and semantics of HTTP events.  Now the response
    body can be received incrementally, via multiple response events; and
    pending requests can be canceled.

  - Add the NCLua GStreamer plugin (gstnclua) and interpreter (nclua-gst)

    We added a GStreamer plugin for NCLua, called gstnclua.  You can try it
    by running something like:

        gst-launch nclua file=PATH-TO-SCRIPT ! ximagesink

    Or you can run the standalone GStreamer interpreter that uses this
    plugin, namely, nclua-gst.

  - Add nclua_resize and ncluaw_resize to libnclua

    We added two functions to resize the surface of the main canvas to
    libnclua.  The first, nclua_resize, is exposed by nclua.h; the second,
    ncluaw_resize, is exposed by ncluaw.h, the Lua-free interface.  We also
    updated the standalone interpreter to call nclua_resize and to send
    resize events to the running script whenever the window is resized.

  - Add the canvas._resize function.

    We added a new internal function, canvas._resize, which resizes the
    surface of a given canvas.

  - Add the canvas.attrFilter function.

    We added a new function, canvas.attrFilter, which selects the algorithm
    used when reading pixels from a source surface.

  - Fix bug in canvas.compose when custom crop parameters were given.

    Scale the source pattern and not the destination cairo context.

  - Make canvas.compose support the composition of a canvas onto itself.

    Now a canvas can be composed onto itself.

  - Add command-line options to NCLua GTK interpreter.

    The GTK interpreter now supports the following options:

       --fullscreen    enable full-screen mode,
       --help          print usage message,
       --scale         scale main canvas
       --size          set the initial window size,
       --version       print version string.

    You can also press F11 to toggle full-screen mode while the script is
    running.

  - Add new configure options.

    We added the following configure options:

       --enable-valgrind (renamed from --enable-valgrind-tests)
       --enable-warnings (renamed from --enable-gcc-warnings)
       --with-event-tcp
       --with-event-http
       --with-nclua-gst
       --with-nclua-gtk

    We moved the recurrent patterns in configure.ac to build-aux/util.m4.

* Version 1.3, February 22, 2015, Guilherme F. Lima

  - Add the HTTP event class and networking examples.

    We added a new event class, called http, for HTTP/HTTPS requests
    (cf. nclua/event/http.lua); this new class depends on Libsoup-2.4.

    We also added two examples of networking and two auxiliary libraries
    under examples/www.  The first example, examples/www/tcp-example.lua,
    makes a simple HTTP request and prints the response body on screen.
    This example uses a blocking TCP library, examples/www/tcp.lua, which is
    implemented on top of the TCP event class.  The second example,
    example/www/http-example.lua, makes some HTTP and HTTPS requests and
    prints the corresponding response headers and bodies on screen.
    Similarly, this example uses a blocking HTTP library,
    examples/www/http.lua, which is implemented on top of the HTTP event
    class.

  - Add support to pointer event class to the nclua binary.

    The nclua binary now generates pointer events, cf. examples/follow.lua.

  - Make GTK+3.0, GIO-2.0, and Libsoup-2.4 optional.

    GTK+3.0 is required by the NCLua binary, GIO-2.0 is required by the TCP
    event class, and Libsoup-2.4 is required by the HTTP event class.  If
    these libraries are not found the corresponding modules are not built.

  - Fix bug in nclua/canvas.c: l_canvas_clear().

    We were wrongly using canvas->width instead of canvas->height to
    initialize height when it was not explicitly given.

  - Fix bug in nclua/event/tcp.lua: receive_finished().

    We were disconnecting the socket when the received data was empty, i.e.,
    zero bytes.  This is wrong; the client is responsible for identifying an
    EOF condition, which may vary from protocol to protocol, and issuing a
    disconnect event.

  - Fix bug in lib/ncluaw.c: ncluaw_panic_wrapper().

    We now make sure that the error message is on top of stack before
    calling the panic function.

* Version 1.2, August 20, 2014, Guilherme F. Lima

  - Fix the order of parameters for NCL class filters in event.register().

    The ITU-T H761 standard enforces the following possible orders for NCL
    filter parameters in event.register calls:

    (1) event.register (f, 'ncl', 'presentation', LABEL, ACTION);
    (2) event.register (f, 'ncl', 'selection',    LABEL, ACTION);
    (3) event.register (f, 'ncl', 'attribution',  NAME, VALUE).

    In previous versions of NCLua, however, event.register() expected ACTION
    to come before LABEL.  This has been fixed.  Now event.register()
    expects LABEL followed by ACTION, as shown in cases (1) and (2) above.

* Version 1.1, July 11, 2014, Guilherme F. Lima

  - Call g_type_init() in systems where it must be explicitly called.

  - Make build system compatible with MinGW.

  - Add contrib/debian subdir with debian packaging stuff.

  - Add new examples: luarocks and pacman.

  - Improve the compatibility of tests.

* Version 1.0, April 9, 2014, Guilherme F. Lima

  - First release.

============================================================================

Copyright (C) 2013-2018 PUC-Rio/Laboratorio TeleMidia

Permission is granted to copy, distribute and/or modify this document under
the terms of the GNU Free Documentation License, Version 1.3 or any later
version published by the Free Software Foundation; with no Invariant
Sections, with no Front-Cover Texts, and with no Back-Cover Texts.  A copy
of the license is included in the "GNU Free Documentation License" file as
part of this distribution.


Local Variables:
mode: outline
outline-regexp: " *[-+*.] \\|"
End:
